########### CMakeMaker autogenerated file ###########
cmake_minimum_required(VERSION 3.6)
find_program(CCACHE_PROGRAM ccache)
if(CCACHE_PROGRAM)
  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}")
endif()

project(cmakemaker_solution CXX)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
macro(add_msvc_precompiled_header PrecompiledHeader 
PrecompiledSource SourcesVar)
  if(MSVC)
    get_filename_component(PrecompiledBasename ${PrecompiledHeader} NAME_WE)
    set(PrecompiledBinary "$(IntDir)/${PrecompiledBasename}.pch")
    set(Sources ${${SourcesVar}})
    set_source_files_properties(${Sources}
      PROPERTIES COMPILE_FLAGS "/Yu\"${PrecompiledHeader}\" /FI\"${PrecompiledHeader}\" /Fp\"${PrecompiledBinary}\""
      OBJECT_DEPENDS "${PrecompiledBinary}")
    set_source_files_properties(${PrecompiledSource}
      PROPERTIES COMPILE_FLAGS "/Yc\"${PrecompiledHeader}\" /FI\"${PrecompiledHeader}\" /Fp\"${PrecompiledBinary}\""
      OBJECT_OUTPUTS "${PrecompiledBinary}")
    list(APPEND ${SourcesVar} ${PrecompiledSource})
  endif(MSVC)
endmacro(add_msvc_precompiled_header)

set(LIBRARY_OUTPUT_PATH Build_Output/libs CACHE PATH "Lib path")
set(EXECUTABLE_OUTPUT_PATH Build_Output/bin CACHE PATH "Exe path")
mark_as_advanced(LIBRARY_OUTPUT_PATH EXECUTABLE_OUTPUT_PATH)
add_definitions(-DUNICODE -D_UNICODE)

if (WIN32)
  add_definitions(-DWindowsBuild)
  set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -MP")
else(WIN32)
  add_definitions(-DUnixBuild)
  set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -std=c++17")
  set(CMAKE_CXX_FLAGS_DEBUG  "${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG")
endif(WIN32)

find_program(CMAKEMAKER_CMD cmakemaker)
if(NOT CMAKEMAKER_CMD)
  add_custom_target(
    ALL_PRE_BUILD
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  )
else()
  add_custom_target(
    ALL_PRE_BUILD
    COMMAND ${CMAKEMAKER_CMD}
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  )
endif()

add_subdirectory(./cmd_fract_cooking)
add_subdirectory(./app_ecs_game_engine)
add_subdirectory(./slib_input)
add_subdirectory(./slib_sound)
add_subdirectory(./slib_core)
add_subdirectory(./slib_graphics)
add_subdirectory(./slib_gui)
add_subdirectory(./slib_physics)
if (MSVC)
  set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT fract_cooking)
endif(MSVC)
add_custom_command(TARGET ALL_PRE_BUILD PRE_BUILD
  COMMAND ${CMAKE_COMMAND} ARGS -E copy_if_different "${CMAKE_BINARY_DIR}/compile_commands.json" "${CMAKE_SOURCE_DIR}/compile_commands.json"
  COMMAND cat ${CMAKE_SOURCE_DIR}/compile_commands.json > ${CMAKE_SOURCE_DIR}/.clang_complete_tmp VERBATIM
  COMMAND sed "s/-/\\n-/g" ${CMAKE_SOURCE_DIR}/.clang_complete_tmp > ${CMAKE_SOURCE_DIR}/.clang_complete VERBATIM
  COMMAND sort ${CMAKE_SOURCE_DIR}/.clang_complete | uniq > ${CMAKE_SOURCE_DIR}/.clang_complete_tmp
  COMMAND sed "/^-o/d" ${CMAKE_SOURCE_DIR}/.clang_complete_tmp > ${CMAKE_SOURCE_DIR}/.clang_complete VERBATIM
  COMMAND sed "/^-c/d" ${CMAKE_SOURCE_DIR}/.clang_complete > ${CMAKE_SOURCE_DIR}/.clang_complete_tmp VERBATIM
  COMMAND sed "/^ /d" ${CMAKE_SOURCE_DIR}/.clang_complete_tmp > ${CMAKE_SOURCE_DIR}/.clang_complete VERBATIM
  COMMAND sed "/^\{/d" ${CMAKE_SOURCE_DIR}/.clang_complete > ${CMAKE_SOURCE_DIR}/.clang_complete_tmp VERBATIM
  COMMAND sed "/^\}/d" ${CMAKE_SOURCE_DIR}/.clang_complete_tmp > ${CMAKE_SOURCE_DIR}/.clang_complete VERBATIM
  COMMAND sed "/^\\[/d" ${CMAKE_SOURCE_DIR}/.clang_complete > ${CMAKE_SOURCE_DIR}/.clang_complete_tmp VERBATIM
  COMMAND sed "/^\\]/d" ${CMAKE_SOURCE_DIR}/.clang_complete_tmp > ${CMAKE_SOURCE_DIR}/.clang_complete VERBATIM
  COMMAND rm ${CMAKE_SOURCE_DIR}/.clang_complete_tmp
)